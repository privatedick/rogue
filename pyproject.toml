[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "rogue"
version = "0.1.0"
description = "AI-assisted development toolkit for automated code improvement"
authors = ["privatedick <privatedick@users.noreply.github.com>"]
readme = "README.md"
license = "Proprietary"
repository = "https://github.com/privatedick/rogue"
packages = [
    { include = "src" },
]
classifiers = [
    "Private :: Do Not Upload",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]

[tool.poetry.dependencies]
python = ">=3.9,<4.0"

# Core dependencies
click = "^8.0"
rich = "^13.0"
typer = "^0.9.0"

# AI and ML
google-generativeai = "^0.8.0"
python-dotenv = "^1.0"

# File operations
watchdog = "^3.0"
pathspec = "^0.11.0"

# Data handling
pydantic = "^2.0"
tomli = "^2.0"
tomli-w = "^1.0"

# Async support
aiohttp = "^3.9.0"
asyncio = "^3.4.3"
loguru = "^0.7.3"

[tool.poetry.group.dev.dependencies]
# Modern linting och formattering
ruff = "^0.3.0"
black = "^24.0"
mypy = "^1.0"

# Testing
pytest = "^7.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.0"
pytest-sugar = "^0.9.7"
hypothesis = "^6.0"

# Development tools
pre-commit = "^3.0"
ipython = "^8.0"
ipdb = "^0.13.0"

[tool.poetry.scripts]
quick = "src.tools.quick:cli"
rogue = "src.tools.quick:cli"

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "B",   # flake8-bugbear
    "I",   # isort
    "C",   # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "COM", # flake8-commas
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # Låt black hantera linjelängder
    "B008",  # Do not perform function call in argument defaults
]
unfixable = [
    "T20",  # Don't auto-remove print statements
    "F841", # Don't remove unused variables
]
exclude = [
    ".git",
    ".ruff_cache",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/*" = ["T20"]

[tool.ruff.isort]
known-first-party = ["src"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
combine-as-imports = true

[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311"]
include = '\.pyi?$'
extend-exclude = '''
(
    tests/data/
    | .*/migrations/
)
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
show_error_codes = true
disable_error_code = ["attr-defined", "name-defined"]
exclude = [
    'tests/data/',
    'docs/conf.py',
]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
check_untyped_defs = false

[tool.pytest.ini_options]
minversion = "6.0"
addopts = """
    -ra
    -q
    --cov=src
    --cov-report=term-missing
    --cov-report=html
    --cov-report=xml
    --no-cov-on-fail
"""
testpaths = ["tests"]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
branch = true
source = ["src"]
omit = [
    "tests/*",
    "**/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "pass",
]
fail_under = 80

[tool.coverage.html]
directory = "coverage_html"

[tool.coverage.xml]
output = "coverage.xml"
